package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"

	"github.com/vgekko/ani-go/graph/model"
	"github.com/vgekko/ani-go/internal/entity"
	"github.com/vgekko/ani-go/pkg/logger/sl"
)

// TitleInfos is the resolver for the titleInfos field.
func (r *queryResolver) TitleInfos(ctx context.Context, filter model.TitleFilter) (*model.TitleInfoPayload, error) {
	payload := new(model.TitleInfoPayload)

	internalFilter := entity.TitleFilter{
		Option: filter.Option,
		Value:  filter.ID,
	}

	titleInfos, err := r.Uc.Info.Search(internalFilter)
	if err != nil {
		r.Log.Error("graphql: ", sl.Err(err))
		return nil, err
	}

	payload.TitleInfo = titleInfos

	return payload, nil
}

// Link is the resolver for the link field.
func (r *queryResolver) Link(ctx context.Context, filter model.TitleFilter) (*model.LinkPayload, error) {
	payload := new(model.LinkPayload)

	internalFilter := entity.TitleFilter{
		Option: filter.Option,
		Value:  filter.ID,
	}

	link, err := r.Uc.Link.Search(internalFilter)
	if err != nil {
		r.Log.Error("graphql: ", sl.Err(err))
		return nil, err
	}

	payload.Link = link

	return payload, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
